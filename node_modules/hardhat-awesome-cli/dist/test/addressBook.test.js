"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line no-implicit-dependencies
const chai_1 = require("chai");
const fs_1 = __importDefault(require("fs"));
const helpers_1 = require("./helpers");
describe('Integration tests', function () {
    describe('AwesomeAddressBook', function () {
        (0, helpers_1.useEnvironment)('hardhat-cli');
        it('saveContract()', function () {
            (0, chai_1.expect)(this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000')).to.be.equal(undefined);
        });
        it('saveContract() wit extra arguments', function () {
            (0, chai_1.expect)(this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1)).to.be.equal(undefined);
        });
        it('2x saveContract() wit extra arguments', function () {
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.saveContract('MockERC20-B', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000001', 0, '0x0000000000000000000000000000000000000002', 2);
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20', 'hardhat')).to.be.equal('0x0000000000000000000000000000000000000000');
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20-B', 'hardhat')).to.be.equal('0x0000000000000000000000000000000000000001');
        });
        it('4x saveContract() (2 different contracts twice, replacing 1st entry)', function () {
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.saveContract('MockERC20-B', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000001', 0, '0x0000000000000000000000000000000000000002', 2);
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000002', 2);
            this.hre.addressBook.saveContract('MockERC20-B', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000001', 0, '0x0000000000000000000000000000000000000002', 2);
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20', 'hardhat')).to.be.equal('0x0000000000000000000000000000000000000001');
            const data = fs_1.default.readFileSync('./contractsAddressDeployed.json');
            (0, chai_1.expect)(JSON.parse(data.toString()).length).to.be.equal(2);
        });
        it('saveContract() wit extra arguments, then clean then from log', function () {
            (0, chai_1.expect)(this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1)).to.be.equal(undefined);
            this.hre.addressBook.cleanContractDeployed('name', 'MockERC20', true, true);
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20', 'hardhat')).to.be.equal('');
        });
        it('saveContract() wit extra arguments, and extra record, then clean then from log', function () {
            (0, chai_1.expect)(this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1)).to.be.equal(undefined);
            this.hre.addressBook.saveContract('MockERC20-test', '0x0000000000000000000000000000000000000001', 'testnet', '0x0000000000000000000000000000000000000000', 1, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.cleanContractDeployed('network', 'hardhat', true, true);
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20', 'hardhat')).to.be.equal('');
        });
        it('3x saveContract() wit extra arguments, then clean then from log', function () {
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'testnet', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.saveContract('MockERC20-B', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000001', 0, '0x0000000000000000000000000000000000000002', 2);
            this.hre.addressBook.cleanContractDeployed('network', 'hardhat', true, true);
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20', 'hardhat')).to.be.equal('');
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20-B', 'hardhat')).to.be.equal('');
        });
        it('3x saveContract() wit extra arguments, then clean then from lo only one', function () {
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'testnet', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000000', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.saveContract('MockERC20-B', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000001', 0, '0x0000000000000000000000000000000000000002', 2);
            this.hre.addressBook.cleanContractDeployed('network', 'testnet', true, true);
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20', 'testnet')).to.be.equal('');
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20', 'hardhat')).to.be.equal('0x0000000000000000000000000000000000000000');
            (0, chai_1.expect)(this.hre.addressBook.retrieveContract('MockERC20-B', 'hardhat')).to.be.equal('0x0000000000000000000000000000000000000001');
        });
        it('retrieveContract()', async function () {
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            (0, chai_1.expect)(await this.hre.addressBook.retrieveContract('MockERC20', 'hardhat')).to.be.equal('0x0000000000000000000000000000000000000001');
        });
        it('retrieveContractObject()', async function () {
            this.hre.addressBook.saveContract('MockERC20', '0x0000000000000000000000000000000000000001', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            this.hre.addressBook.saveContract('MockERC20-retrieveContractObject2', '0x0000000000000000000000000000000000000002', 'hardhat', '0x0000000000000000000000000000000000000000', 0, '0x0000000000000000000000000000000000000001', 1);
            // Wait 1 second to ensure the timestamp is different
            await new Promise((resolve) => setTimeout(resolve, 1000));
            const retrieveContractObject = await this.hre.addressBook.retrieveContractObject('MockERC20', 'hardhat');
            (0, chai_1.expect)(retrieveContractObject).to.not.be.equal(null);
            if (retrieveContractObject) {
                (0, chai_1.expect)(retrieveContractObject.name).to.be.equal('MockERC20');
                (0, chai_1.expect)(retrieveContractObject.address).to.be.equal('0x0000000000000000000000000000000000000001');
                (0, chai_1.expect)(retrieveContractObject.network).to.be.equal('hardhat');
                (0, chai_1.expect)(retrieveContractObject.blockHash).to.be.equal('0x0000000000000000000000000000000000000001');
                (0, chai_1.expect)(retrieveContractObject.blockNumber).to.be.equal(1);
            }
        });
        it('contractsAddressDeployed.json exist', function () {
            (0, chai_1.expect)(fs_1.default.existsSync('contractsAddressDeployed.json')).to.be.equal(true);
        });
        it('contractsAddressDeployedHistory.json exist', function () {
            (0, chai_1.expect)(fs_1.default.existsSync('contractsAddressDeployedHistory.json')).to.be.equal(true);
        });
        it('Delete contractsAddressDeployed.json from previous tests', function () {
            (0, chai_1.expect)(fs_1.default.unlinkSync('contractsAddressDeployed.json')).to.be.equal(undefined);
            (0, chai_1.expect)(fs_1.default.existsSync('contractsAddressDeployed.json')).to.be.equal(false);
        });
        it('Delete contractsAddressDeployedHistory.json from previous tests', function () {
            (0, chai_1.expect)(fs_1.default.unlinkSync('contractsAddressDeployedHistory.json')).to.be.equal(undefined);
            (0, chai_1.expect)(fs_1.default.existsSync('contractsAddressDeployedHistory.json')).to.be.equal(false);
        });
    });
});
//# sourceMappingURL=addressBook.test.js.map