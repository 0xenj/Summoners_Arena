"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCustomChain = exports.removeActivatedChain = exports.addActivatedChain = exports.buildActivatedChainNetworkConfig = void 0;
const fs_1 = __importDefault(require("fs"));
const buildEnv_1 = require("./buildEnv");
const buildFilesList_1 = require("./buildFilesList");
const config_1 = require("./config");
const buildActivatedChainNetworkConfig = () => {
    let chainConfig = '';
    let fileSetting = [];
    const addressBookConfig = (0, config_1.getAddressBookConfig)();
    if (fs_1.default.existsSync(addressBookConfig.fileHardhatAwesomeCLI)) {
        const rawdata = fs_1.default.readFileSync(addressBookConfig.fileHardhatAwesomeCLI);
        fileSetting = JSON.parse(rawdata);
    }
    if (fileSetting && fileSetting.activatedChain) {
        if (fileSetting.activatedChain.length > 0) {
            fileSetting.activatedChain.forEach((chain) => {
                const defaultRpcUrl = (0, buildEnv_1.getEnvValue)('rpcUrl'.toUpperCase() + '_' + chain.chainName.toUpperCase());
                const defaultPrivateKey = (0, buildEnv_1.getEnvValue)('privateKey'.toUpperCase() + '_' + chain.chainName.toUpperCase());
                const defaultMnemonic = (0, buildEnv_1.getEnvValue)('mnemonic'.toUpperCase() + '_' + chain.chainName.toUpperCase());
                let buildAccounts = '';
                if (defaultPrivateKey) {
                    buildAccounts = `"accounts": ["${defaultPrivateKey}"]`;
                }
                else if (defaultMnemonic) {
                    buildAccounts = `"accounts": {
                        "mnemonic": "${defaultMnemonic}"
                    }`;
                }
                if (buildAccounts) {
                    if (defaultRpcUrl || chain.defaultRpcUrl) {
                        chainConfig =
                            chainConfig +
                                `
                            "${chain.chainName}": {
                                "chainId": ${chain.chainId},
                                "gas": "${chain.gas || 'auto'}",
                                "gasPrice": "auto",
                                "gasMultiplier": 1,
                                "url": "${defaultRpcUrl || chain.defaultRpcUrl || 'http://localhost:8545'}",
                                "timeout": 40000,
                                "httpHeaders": {},
                                ${buildAccounts || '"accounts": "remote"'}
                            },`;
                    }
                    else {
                        chainConfig =
                            chainConfig +
                                `
                            "${chain.chainName}": {
                                "chainId": ${chain.chainId},
                                "gas": "${chain.gas || 'auto'}",
                                "gasPrice": "auto",
                                "gasMultiplier": 1,
                                "url": "http://localhost:8545",
                                "timeout": 40000,
                                "httpHeaders": {},
                                ${buildAccounts || '"accounts": "remote"'}
                            },`;
                    }
                }
                else {
                    if (defaultRpcUrl || chain.defaultRpcUrl) {
                        chainConfig =
                            chainConfig +
                                `
                            "${chain.chainName}": {
                                "chainId": ${chain.chainId},
                                "gas": "${chain.gas || 'auto'}",
                                "gasPrice": "auto",
                                "gasMultiplier": 1,
                                "url": "${defaultRpcUrl || chain.defaultRpcUrl || ''}",
                                "timeout": 40000,
                                "httpHeaders": {},
                                ${buildAccounts || '"accounts": "remote"'}
                            },`;
                    }
                    else {
                        chainConfig =
                            chainConfig +
                                `
                            "${chain.chainName}": {
                                "chainId": ${chain.chainId},
                                "gas": "${chain.gas || 'auto'}",
                                "gasPrice": "auto",
                                "gasMultiplier": 1,
                                "url": "http://localhost:8545",
                                "timeout": 40000,
                                "httpHeaders": {},
                                "accounts": "remote"
                            },`;
                    }
                }
                return chainConfig;
            });
            // await sleep(100)
            const fihainConfig = `${chainConfig.slice(0, -1)}`;
            return fihainConfig;
        }
    }
    return [];
};
exports.buildActivatedChainNetworkConfig = buildActivatedChainNetworkConfig;
const addChain = async (chainName, chainToAdd) => {
    let fileSetting = [];
    const addressBookConfig = (0, config_1.getAddressBookConfig)();
    if (fs_1.default.existsSync(addressBookConfig.fileHardhatAwesomeCLI)) {
        const rawdata = fs_1.default.readFileSync(addressBookConfig.fileHardhatAwesomeCLI);
        fileSetting = JSON.parse(rawdata);
        if (fileSetting) {
            if (!fileSetting.activatedChain) {
                fileSetting = Object.assign(Object.assign({}, fileSetting), { activatedChain: [] });
            }
            else {
                fileSetting = Object.assign(Object.assign({}, fileSetting), { activatedChain: [...fileSetting.activatedChain] });
            }
        }
    }
    else {
        fileSetting = {
            activatedChain: []
        };
    }
    if (fileSetting && fileSetting.activatedChain) {
        if (fileSetting.activatedChain.length > 0) {
            if (!fileSetting.activatedChain.find((chain) => chain.name === chainName)) {
                fileSetting.activatedChain.push(chainToAdd);
            }
        }
        else
            fileSetting.activatedChain.push(chainToAdd);
    }
    else {
        fileSetting.push({
            activatedChain: [chainToAdd]
        });
    }
    try {
        fs_1.default.writeFileSync(addressBookConfig.fileHardhatAwesomeCLI, JSON.stringify(fileSetting, null, 2));
    }
    catch (_a) {
        console.log('\x1b[31m%s\x1b[0m', 'Error adding chain: ' + chainName + ' to your settings!');
    }
};
const addActivatedChain = async (chainName) => {
    const FullChainList = config_1.DefaultChainList;
    const chainToAdd = FullChainList.find((chain) => chain.name === chainName);
    if (chainToAdd !== undefined)
        await addChain(chainName, chainToAdd);
};
exports.addActivatedChain = addActivatedChain;
const removeActivatedChain = async (chainName) => {
    const FullChainList = config_1.DefaultChainList;
    const chainToRemove = FullChainList.find((chain) => chain.name === chainName);
    let fileSetting = [];
    const addressBookConfig = (0, config_1.getAddressBookConfig)();
    if (fs_1.default.existsSync(addressBookConfig.fileHardhatAwesomeCLI) && chainToRemove) {
        const rawdata = fs_1.default.readFileSync(addressBookConfig.fileHardhatAwesomeCLI);
        fileSetting = JSON.parse(rawdata);
        if (fileSetting && fileSetting.activatedChain) {
            if (fileSetting.activatedChain.length > 0) {
                fileSetting.activatedChain
                    .filter((chain) => chain.chainName === chainToRemove.chainName)
                    .forEach((chain) => {
                    fileSetting.activatedChain.pop(chain);
                    fs_1.default.writeFileSync(addressBookConfig.fileHardhatAwesomeCLI, JSON.stringify(fileSetting, null, 2));
                });
            }
        }
    }
};
exports.removeActivatedChain = removeActivatedChain;
const addCustomChain = async (chainDetails) => {
    const FullChainList = config_1.DefaultChainList;
    const ActivatedChainList = await (0, buildFilesList_1.buildActivatedChainList)();
    // Verify if the chain already exists in regular full chain list
    if (FullChainList.find((chain) => chain.chainName === chainDetails.chainName))
        console.log('\x1b[33m%s\x1b[0m', 'Chain with same Short-Name already exists in regular chain selection');
    else if (FullChainList.find((chain) => chain.chainId === chainDetails.chainId))
        console.log('\x1b[33m%s\x1b[0m', 'Chain with same chainId already exists in regular chain selection');
    // Verify if the chain already exists in user setting activated chain list
    else if (ActivatedChainList.find((chain) => chain.chainName === chainDetails.chainName))
        console.log('\x1b[33m%s\x1b[0m', 'Chain with same Short-Name already exists in your settings activated chain list');
    else if (ActivatedChainList.find((chain) => chain.chainId === chainDetails.chainId))
        console.log('\x1b[33m%s\x1b[0m', 'Chain with same chainId already exists in your settings activated chain list');
    else
        await addChain(chainDetails.chainName, chainDetails);
};
exports.addCustomChain = addCustomChain;
//# sourceMappingURL=buildNetworks.js.map