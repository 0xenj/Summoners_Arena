"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
const importPackageHardhatConfigFile = async (packageName, addToConfig, removeFromConfig) => {
    let hardhatConfigFilePath = '';
    if (fs_1.default.existsSync('hardhat.config.js'))
        hardhatConfigFilePath = 'hardhat.config.js';
    else if (fs_1.default.existsSync('hardhat.config.ts'))
        hardhatConfigFilePath = 'hardhat.config.ts';
    else {
        console.log('\x1b[31m%s\x1b[0m', 'Hardhat config file not found!');
        return;
    }
    if (hardhatConfigFilePath) {
        const rawdata = fs_1.default.readFileSync(hardhatConfigFilePath);
        const hardhatConfigFile = rawdata.toString();
        if (addToConfig &&
            hardhatConfigFile.search(`require("${packageName}");`) === -1 &&
            hardhatConfigFile.search(`require('${packageName}');`) === -1 &&
            hardhatConfigFile.search(`require("${packageName}")`) === -1 &&
            hardhatConfigFile.search(`require('${packageName}')`) === -1 &&
            hardhatConfigFile.search(`import "${packageName}";`) === -1 &&
            hardhatConfigFile.search(`import '${packageName}';`) === -1 &&
            hardhatConfigFile.search(`import "${packageName}"`) === -1 &&
            hardhatConfigFile.search(`import '${packageName}'`) === -1) {
            let newHardHatConfig = '';
            if (hardhatConfigFile.includes(`require("hardhat-awesome-cli");`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require("hardhat-awesome-cli");`, `require("hardhat-awesome-cli");
require("${packageName}");`);
            }
            else if (hardhatConfigFile.includes(`require('hardhat-awesome-cli');`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require('hardhat-awesome-cli');`, `require('hardhat-awesome-cli');
require('${packageName}');`);
            }
            else if (hardhatConfigFile.includes(`require("hardhat-awesome-cli")`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require("hardhat-awesome-cli")`, `require("hardhat-awesome-cli")
require("${packageName}")`);
            }
            else if (hardhatConfigFile.includes(`require('hardhat-awesome-cli')`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require('hardhat-awesome-cli')`, `require('hardhat-awesome-cli')
require('${packageName}')`);
            }
            else if (hardhatConfigFile.includes(`import "hardhat-awesome-cli";`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import "hardhat-awesome-cli";`, `import "hardhat-awesome-cli";
import "${packageName}";`);
            }
            else if (hardhatConfigFile.includes(`import 'hardhat-awesome-cli';`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import 'hardhat-awesome-cli';')`, `import 'hardhat-awesome-cli';
import '${packageName}';`);
            }
            else if (hardhatConfigFile.includes(`import "hardhat-awesome-cli"`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import "hardhat-awesome-cli"`, `import "hardhat-awesome-cli"
import "${packageName}"`);
            }
            else if (hardhatConfigFile.includes(`import 'hardhat-awesome-cli'`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Adding ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import 'hardhat-awesome-cli'`, `import 'hardhat-awesome-cli'
import '${packageName}'`);
            }
            else {
                newHardHatConfig = hardhatConfigFile;
                console.log('\x1b[34m%s\x1b[0m', 'Package ' + packageName + ' not imported in ' + hardhatConfigFilePath + ' file');
            }
            fs_1.default.writeFileSync(hardhatConfigFilePath, newHardHatConfig);
        }
        else if (removeFromConfig) {
            let newHardHatConfig = '';
            if (hardhatConfigFile.search(`require("${packageName}");`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require("${packageName}");`, '');
            }
            else if (hardhatConfigFile.search(`require('${packageName}');`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require('${packageName}');`, '');
            }
            else if (hardhatConfigFile.search(`require("${packageName}")`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require("${packageName}")`, '');
            }
            else if (hardhatConfigFile.search(`require('${packageName}')`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`require('${packageName}')`, '');
            }
            else if (hardhatConfigFile.search(`import "${packageName}";`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import "${packageName}";`, '');
            }
            else if (hardhatConfigFile.search(`import '${packageName}';`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import '${packageName}';`, '');
            }
            else if (hardhatConfigFile.search(`import "${packageName}"`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import "${packageName}"`, '');
            }
            else if (hardhatConfigFile.search(`import '${packageName}'`)) {
                console.log('\x1b[33m%s\x1b[0m', 'Removing ' + packageName + ' from your ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile.replace(`import '${packageName}'`, '');
            }
            else {
                console.log('\x1b[34m%s\x1b[0m', 'Package ' + packageName + ' not found in ' + hardhatConfigFilePath + ' file');
                newHardHatConfig = hardhatConfigFile;
            }
            fs_1.default.writeFileSync(hardhatConfigFilePath, newHardHatConfig);
        }
    }
};
const detectPackage = async (packageName, install, uninstall, addRemoveInHardhatConfig) => {
    if (require && require.main) {
        const nodeModulesPath = path_1.default.join(path_1.default.dirname(require.main.filename), '../../../');
        if (fs_1.default.existsSync(nodeModulesPath + packageName)) {
            if (uninstall) {
                console.log('\x1b[34m%s\x1b[0m', 'Uninstalling package: ', '\x1b[97m\x1b[0m', packageName);
                if (fs_1.default.existsSync('package-lock.json')) {
                    if (addRemoveInHardhatConfig)
                        await importPackageHardhatConfigFile(packageName, false, true);
                    await (0, utils_1.runCommand)('npm remove ' + packageName, '', '', false);
                    await (0, utils_1.sleep)(5000);
                }
                else if (fs_1.default.existsSync('yarn-lock.json')) {
                    if (addRemoveInHardhatConfig)
                        await importPackageHardhatConfigFile(packageName, false, true);
                    await (0, utils_1.runCommand)('yarn remove ' + packageName, '', '', false);
                    await (0, utils_1.sleep)(5000);
                }
            }
            return true;
        }
        else {
            if (install) {
                console.log('\x1b[34m%s\x1b[0m', 'Installing package: ', '\x1b[97m\x1b[0m', packageName);
                if (fs_1.default.existsSync('package-lock.json')) {
                    console.log('\x1b[33m%s\x1b[0m', 'Detected package-lock.json, installing with npm');
                    if (addRemoveInHardhatConfig)
                        await importPackageHardhatConfigFile(packageName, true, false);
                    await (0, utils_1.runCommand)('npm install ' + packageName, '', ' --save-dev', false);
                    await (0, utils_1.sleep)(5000);
                }
                else if (fs_1.default.existsSync('yarn-lock.json')) {
                    console.log('\x1b[33m%s\x1b[0m', 'Detected yarn-lock.json, installing with yarn');
                    if (addRemoveInHardhatConfig)
                        await importPackageHardhatConfigFile(packageName, true, false);
                    await (0, utils_1.runCommand)('yarn add ' + packageName, '', ' -D', false);
                    await (0, utils_1.sleep)(5000);
                }
            }
            return false;
        }
    }
};
exports.default = detectPackage;
//# sourceMappingURL=packageInstaller.js.map