#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_1 = require("hardhat/config");
const plugins_1 = require("hardhat/plugins");
const path_1 = __importDefault(require("path"));
const AwesomeAddressBook_1 = require("./AwesomeAddressBook");
const buildNetworks_1 = require("./buildNetworks");
const functionList_1 = require("./functionList");
const serveInquirer_1 = __importDefault(require("./serveInquirer"));
require("./type-extensions");
(0, config_1.extendConfig)(async (config, userConfig) => {
    var _a;
    const userPath = (_a = userConfig.paths) === null || _a === void 0 ? void 0 : _a.cli;
    let cli;
    if (userPath === undefined)
        cli = path_1.default.join(config.paths.root, 'cli');
    else {
        if (path_1.default.isAbsolute(userPath))
            cli = userPath;
        else
            cli = path_1.default.normalize(path_1.default.join(config.paths.root, userPath));
    }
    config.paths.cli = cli;
    const getNetworkConfig = (0, buildNetworks_1.buildActivatedChainNetworkConfig)();
    let buildNetworkConfig = {};
    if (getNetworkConfig) {
        buildNetworkConfig = `{
                "networks": [
                    {${getNetworkConfig}}
                ]
            }`;
        buildNetworkConfig = JSON.parse(buildNetworkConfig);
    }
    if (buildNetworkConfig.networks !== undefined) {
        if (buildNetworkConfig.networks[0] !== undefined) {
            if (buildNetworkConfig.networks[0].ethereum !== undefined)
                config.networks.ethereum = buildNetworkConfig.networks[0].ethereum;
            if (buildNetworkConfig.networks[0].ropsten !== undefined)
                config.networks.ropsten = buildNetworkConfig.networks[0].ropsten;
            if (buildNetworkConfig.networks[0].rinkeby !== undefined)
                config.networks.rinkeby = buildNetworkConfig.networks[0].rinkeby;
            if (buildNetworkConfig.networks[0].kovan !== undefined)
                config.networks.kovan = buildNetworkConfig.networks[0].kovan;
            if (buildNetworkConfig.networks[0].polygon !== undefined)
                config.networks.polygon = buildNetworkConfig.networks[0].polygon;
            if (buildNetworkConfig.networks[0].mumbai !== undefined)
                config.networks.mumbai = buildNetworkConfig.networks[0].mumbai;
            if (buildNetworkConfig.networks[0].optimism !== undefined)
                config.networks.optimism = buildNetworkConfig.networks[0].optimism;
            if (buildNetworkConfig.networks[0].optimismTestnetKovan !== undefined)
                config.networks.optimismTestnetKovan = buildNetworkConfig.networks[0].optimismTestnetKovan;
            // Custom networks
            if (buildNetworkConfig.networks[0].customChain1 !== undefined)
                config.networks.customChain1 = buildNetworkConfig.networks[0].customChain1;
            if (buildNetworkConfig.networks[0].customChain2 !== undefined)
                config.networks.customChain2 = buildNetworkConfig.networks[0].customChain2;
            if (buildNetworkConfig.networks[0].customChain3 !== undefined)
                config.networks.customChain3 = buildNetworkConfig.networks[0].customChain3;
            if (buildNetworkConfig.networks[0].customChain4 !== undefined)
                config.networks.customChain4 = buildNetworkConfig.networks[0].customChain4;
            if (buildNetworkConfig.networks[0].customChain5 !== undefined)
                config.networks.customChain5 = buildNetworkConfig.networks[0].customChain5;
            if (buildNetworkConfig.networks[0].customChain6 !== undefined)
                config.networks.customChain6 = buildNetworkConfig.networks[0].customChain6;
            if (buildNetworkConfig.networks[0].customChain7 !== undefined)
                config.networks.customChain7 = buildNetworkConfig.networks[0].customChain7;
            if (buildNetworkConfig.networks[0].customChain8 !== undefined)
                config.networks.customChain8 = buildNetworkConfig.networks[0].customChain8;
        }
    }
});
(0, config_1.extendEnvironment)(async (hre) => {
    hre.addressBook = (0, plugins_1.lazyObject)(() => new AwesomeAddressBook_1.AwesomeAddressBook(hre));
    hre.functionList = (0, plugins_1.lazyObject)(() => new functionList_1.FunctionList(hre));
});
/**
 * CLI task implementation
 * @param  {HardhatUserArgs} args
 * @param  {HardhatEnv} env
 */
(0, config_1.task)('cli', 'Easy command line interface to use hardhat')
    .addOptionalParam('excludeTestFile', 'Exclude test file from the tests selection list', '')
    .addOptionalParam('excludeScriptFile', 'Exclude script file from the scripts selection list', '')
    .addOptionalParam('excludeContractFile', 'Exclude contract file from the contract selection list', '')
    .addOptionalParam('addHardhatPlugin', 'Add other Hardhat plugins', '')
    .addOptionalParam('removeHardhatPlugin', 'Remove other Hardhat plugins', '')
    .addOptionalParam('addGithubTestWorkflow', 'Create Github test workflows', '')
    .addOptionalParam('addFoundry', 'Create Foundry settings, remapping and test utilities', '')
    .addOptionalParam('addActivatedChain', 'Add chains from the chain selection', '')
    .addOptionalParam('removeActivatedChain', 'Remove chains from the chain selection', '')
    .addOptionalParam('getAccountBalance', 'Get account balance', '')
    .setAction(async function (args, env) {
    await (0, serveInquirer_1.default)(args, env);
});
(0, config_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS).setAction(async (_, __, runSuper) => {
    const paths = await runSuper();
    return paths.filter((p) => !p.endsWith('.t.sol'));
});
//# sourceMappingURL=index.js.map