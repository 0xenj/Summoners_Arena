"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMockDeploymentScriptOrTest = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const mockContracts_1 = __importDefault(require("./mockContracts"));
const packageInstaller_1 = __importDefault(require("./packageInstaller"));
const utils_1 = require("./utils");
const buildMockContract = async (contractName) => {
    if (require && require.main) {
        const packageRootPath = path_1.default.join(path_1.default.dirname(require.main.filename), '../../../hardhat-awesome-cli/src/mockContracts');
        if (fs_1.default.existsSync(packageRootPath)) {
            if (fs_1.default.existsSync('contracts')) {
                if (mockContracts_1.default) {
                    const contractToMock = mockContracts_1.default.filter((contract) => contract.name === contractName);
                    if (contractToMock) {
                        if (fs_1.default.existsSync('contracts/' + contractName + '.sol'))
                            console.log('\x1b[33m%s\x1b[0m', 'Mock contract already exists');
                        else {
                            if (fs_1.default.existsSync('contracts/' + contractName + '.sol'))
                                console.log('\x1b[33m%s\x1b[0m', "Can't locate the mock contract");
                            else {
                                console.log('\x1b[32m%s\x1b[0m', 'Creating ', contractName, ' in contracts/');
                                fs_1.default.copyFileSync(packageRootPath + '/' + contractName + '.sol', 'contracts/' + contractName + '.sol');
                            }
                        }
                        if (contractToMock[0].dependencies && contractToMock[0].dependencies.length > 0) {
                            contractToMock[0].dependencies.forEach(async (dependency) => {
                                await (0, packageInstaller_1.default)(dependency, true, false, false);
                            });
                            await (0, utils_1.sleep)(3000);
                        }
                    }
                }
            }
            else
                console.log('\x1b[33m%s\x1b[0m', 'Error creating mock contract');
        }
    }
};
const buildMockDeploymentScriptOrTest = async (contractName, type) => {
    var _a;
    if (require && require.main) {
        const packageRootPath = path_1.default.join(path_1.default.dirname(require.main.filename), '../../../hardhat-awesome-cli/src/mockContracts');
        if (fs_1.default.existsSync(packageRootPath)) {
            if (fs_1.default.existsSync('contracts')) {
                if (mockContracts_1.default) {
                    let deploymentScriptOrTestPath = '';
                    let finalPath = '';
                    let scriptOrTestDir = '';
                    const contractToMock = mockContracts_1.default.filter((contract) => contract.name === contractName);
                    if (contractToMock && type === 'deployment') {
                        scriptOrTestDir = 'scripts';
                        if (fs_1.default.existsSync('hardhat.config.js')) {
                            if (contractToMock[0].deploymentScriptJs !== undefined)
                                deploymentScriptOrTestPath = contractToMock[0].deploymentScriptJs;
                        }
                        else if (fs_1.default.existsSync('hardhat.config.ts')) {
                            if (contractToMock[0].deploymentScriptTs !== undefined)
                                deploymentScriptOrTestPath = contractToMock[0].deploymentScriptTs;
                            else if (contractToMock[0].deploymentScriptJs !== undefined)
                                deploymentScriptOrTestPath = contractToMock[0].deploymentScriptJs;
                        }
                        finalPath = deploymentScriptOrTestPath;
                    }
                    if (contractToMock && type === 'test') {
                        scriptOrTestDir = 'test';
                        if (fs_1.default.existsSync('hardhat.config.js')) {
                            if (contractToMock[0].testScriptJs !== undefined)
                                deploymentScriptOrTestPath = contractToMock[0].testScriptJs;
                        }
                        else if (fs_1.default.existsSync('hardhat.config.ts')) {
                            if (contractToMock[0].testScriptTs !== undefined)
                                deploymentScriptOrTestPath = contractToMock[0].testScriptTs;
                            else if (contractToMock[0].testScriptJs !== undefined)
                                deploymentScriptOrTestPath = contractToMock[0].testScriptJs;
                        }
                        finalPath = deploymentScriptOrTestPath;
                    }
                    if (contractToMock && type === 'testForge') {
                        scriptOrTestDir = 'contracts/test';
                        if (((_a = contractToMock[0]) === null || _a === void 0 ? void 0 : _a.testContractFoundry) !== undefined)
                            deploymentScriptOrTestPath = contractToMock[0].testContractFoundry;
                        finalPath = deploymentScriptOrTestPath.replace('testForge/', 'contracts/test/');
                    }
                    if (contractToMock && deploymentScriptOrTestPath && finalPath) {
                        if (fs_1.default.existsSync(finalPath))
                            console.log('\x1b[33m%s\x1b[0m', 'The ' + type + ' in ' + scriptOrTestDir + '/ already exists');
                        else {
                            if (fs_1.default.existsSync(deploymentScriptOrTestPath))
                                console.log('\x1b[33m%s\x1b[0m', "Can't locate the " + type + ' ' + scriptOrTestDir);
                            else {
                                console.log('\x1b[32m%s\x1b[0m', 'Creating ' + type + ' for ', contractName, ' in ' + scriptOrTestDir + '/');
                                if (!fs_1.default.existsSync(scriptOrTestDir + '/'))
                                    fs_1.default.mkdirSync(scriptOrTestDir + '/');
                                const rawData = fs_1.default.readFileSync(packageRootPath + '/' + deploymentScriptOrTestPath);
                                await (0, utils_1.sleep)(500);
                                fs_1.default.writeFileSync(finalPath, rawData);
                            }
                        }
                    }
                }
            }
            else
                console.log('\x1b[33m%s\x1b[0m', 'Error creating ' + type + ' script');
        }
    }
};
exports.buildMockDeploymentScriptOrTest = buildMockDeploymentScriptOrTest;
exports.default = buildMockContract;
//# sourceMappingURL=buildMockContracts.js.map