"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore-next-line
const hardhat_1 = require("hardhat");
async function main() {
    const [deployer] = await hardhat_1.ethers.getSigners();
    let logicContract = '';
    if (hardhat_1.network.name !== 'hardhat' && hardhat_1.network.name !== 'local') {
        logicContract = await hardhat_1.addressBook.retrieveContract('MockERC20Upgradeable', hardhat_1.network.name);
        if (!logicContract)
            logicContract = await hardhat_1.addressBook.retrieveContract('MockERC721Upgradeable', hardhat_1.network.name);
        if (!logicContract)
            logicContract = await hardhat_1.addressBook.retrieveContract('MockERC1155Upgradeable', hardhat_1.network.name);
    }
    if (!logicContract) {
        const MockERC20Upgradeable = await hardhat_1.ethers.getContractFactory('MockERC20Upgradeable');
        const mockERC20Upgradeable = await MockERC20Upgradeable.deploy();
        await mockERC20Upgradeable.deployed();
        await hardhat_1.addressBook.saveContract('MockERC20Upgradeable', mockERC20Upgradeable.address, hardhat_1.network.name, deployer.address);
        await mockERC20Upgradeable.initialize('MockERC20Upgradeable', 'MOCK');
        console.log('MockERC20Upgradeable deployed to:', mockERC20Upgradeable.address);
        logicContract = mockERC20Upgradeable.address;
    }
    let proxyAdminContract = '';
    if (hardhat_1.network.name !== 'hardhat' && hardhat_1.network.name !== 'local') {
        proxyAdminContract = await hardhat_1.addressBook.retrieveContract('MockERC20Upgradeable', hardhat_1.network.name);
    }
    if (!proxyAdminContract) {
        const MockProxyAdmin = await hardhat_1.ethers.getContractFactory('MockProxyAdmin');
        const mockProxyAdmin = await MockProxyAdmin.deploy();
        await mockProxyAdmin.deployed();
        await hardhat_1.addressBook.saveContract('MockProxyAdmin', mockProxyAdmin.address, hardhat_1.network.name, deployer.address);
        console.log('MockProxyAdmin deployed to:', mockProxyAdmin.address);
        proxyAdminContract = mockProxyAdmin.address;
    }
    const MockTransparentUpgradeableProxy = await hardhat_1.ethers.getContractFactory('MockTransparentUpgradeableProxy');
    const mockTransparentUpgradeableProxy = await MockTransparentUpgradeableProxy.deploy(logicContract, proxyAdminContract, '0x');
    await mockTransparentUpgradeableProxy.deployed();
    await hardhat_1.addressBook.saveContract('MockTransparentUpgradeableProxy', mockTransparentUpgradeableProxy.address, hardhat_1.network.name, deployer.address);
    console.log('MockTransparentUpgradeableProxy deployed to:', mockTransparentUpgradeableProxy.address);
}
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
//# sourceMappingURL=deploy-Mock-Transparent-Upgradeable-Proxy.js.map