"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildContractsList = exports.buildScriptsList = exports.buildTestsList = exports.buildAllForgeTestsList = exports.buildAllContractsList = exports.buildAllScriptsList = exports.buildAllTestsList = exports.buildActivatedChainList = void 0;
const fs_1 = __importDefault(require("fs"));
const buildExcludedFile_1 = require("./buildExcludedFile");
const config_1 = require("./config");
const buildActivatedChainList = async () => {
    const chainList = [];
    let fileSetting = {};
    const addressBookConfig = (0, config_1.getAddressBookConfig)();
    if (fs_1.default.existsSync(addressBookConfig.fileHardhatAwesomeCLI)) {
        const rawdata = fs_1.default.readFileSync(addressBookConfig.fileHardhatAwesomeCLI);
        fileSetting = JSON.parse(rawdata);
    }
    if (fileSetting && fileSetting.activatedChain) {
        if (fileSetting.activatedChain.length > 0) {
            fileSetting.activatedChain.forEach((chain) => {
                chainList.push(chain);
            });
        }
    }
    return chainList;
};
exports.buildActivatedChainList = buildActivatedChainList;
const buildAllTestsList = async () => {
    const testList = [];
    if (fs_1.default.existsSync('test')) {
        testList.push({
            name: 'All tests',
            type: 'all',
            filePath: ''
        });
        const files = fs_1.default.readdirSync('test');
        files.map((file) => {
            let fileName;
            if (fs_1.default.lstatSync('test/' + file).isFile()) {
                fileName = file.replace(/\.[^/.]+$/, '').replace(/\.test/, ' - Test');
            }
            else if (fs_1.default.lstatSync('test/' + file).isDirectory()) {
                fileName = file + '/';
                file = file + '/';
            }
            else {
                fileName = file;
            }
            const words = fileName.split(' ');
            for (let i = 0; i < words.length; i++) {
                words[i] = words[i][0].toUpperCase() + words[i].substr(1);
            }
            fileName = words.join(' ');
            testList.push({
                name: fileName,
                type: 'file',
                filePath: file
            });
        });
    }
    return testList;
};
exports.buildAllTestsList = buildAllTestsList;
const buildAllScriptsList = async () => {
    const scriptsList = [];
    if (fs_1.default.existsSync('scripts')) {
        const files = fs_1.default.readdirSync('scripts');
        files.map((file) => {
            let fileName;
            if (fs_1.default.lstatSync('scripts/' + file).isFile()) {
                fileName = file.replace(/\.[^/.]+$/, '').replace(/\.test/, ' - Test');
            }
            else if (fs_1.default.lstatSync('scripts/' + file).isDirectory()) {
                fileName = file + '/';
                file = file + '/';
            }
            else {
                fileName = file;
            }
            const words = fileName.split(' ');
            for (let i = 0; i < words.length; i++) {
                words[i] = words[i][0].toUpperCase() + words[i].substr(1);
            }
            fileName = words.join(' ');
            scriptsList.push({
                name: fileName,
                type: 'file',
                filePath: file
            });
        });
    }
    return scriptsList;
};
exports.buildAllScriptsList = buildAllScriptsList;
const buildAllContractsList = async () => {
    const scontractsList = [];
    if (fs_1.default.existsSync('contracts')) {
        const files = fs_1.default.readdirSync('contracts');
        files.map((file) => {
            let fileName;
            if (fs_1.default.lstatSync('contracts/' + file).isFile()) {
                fileName = file.replace(/\.[^/.]+$/, '');
            }
            else if (fs_1.default.lstatSync('contracts/' + file).isDirectory()) {
                fileName = file + '/';
                file = file + '/';
            }
            else {
                fileName = file;
            }
            const words = fileName.split(' ');
            for (let i = 0; i < words.length; i++) {
                words[i] = words[i][0].toUpperCase() + words[i].substr(1);
            }
            fileName = words.join(' ');
            scontractsList.push({
                name: fileName,
                type: 'file',
                filePath: file
            });
        });
    }
    return scontractsList;
};
exports.buildAllContractsList = buildAllContractsList;
const buildAllForgeTestsList = async () => {
    const testList = [];
    if (fs_1.default.existsSync('test')) {
        testList.push({
            name: 'All tests',
            type: 'all',
            filePath: ''
        });
        const files = fs_1.default.readdirSync('contracts/test');
        files.map((file) => {
            let fileName;
            if (fs_1.default.lstatSync('contracts/test/' + file).isFile()) {
                fileName = file.replace(/\.[^/.]+$/, '').replace(/\.test/, ' - Test');
            }
            else if (fs_1.default.lstatSync('contracts/test/' + file).isDirectory()) {
                fileName = file + '/';
            }
            else {
                fileName = file;
            }
            const words = fileName.split(' ');
            for (let i = 0; i < words.length; i++) {
                words[i] = words[i][0].toUpperCase() + words[i].substr(1);
            }
            fileName = words.join(' ');
            testList.push({
                name: fileName,
                type: 'file',
                filePath: file
            });
        });
    }
    return testList;
};
exports.buildAllForgeTestsList = buildAllForgeTestsList;
const buildTestsList = async () => {
    let allTestList = await (0, exports.buildAllTestsList)();
    let excludedFiles = await (0, buildExcludedFile_1.buildExcludedFile)();
    const buildFilePath = [];
    if (excludedFiles && excludedFiles.length > 0) {
        excludedFiles = excludedFiles.filter((test) => test.directory === 'test');
        if (excludedFiles && excludedFiles.length > 0) {
            excludedFiles.map((file) => {
                buildFilePath.push(file.filePath);
            });
            allTestList = allTestList.filter((script) => {
                return !buildFilePath.includes(script.filePath);
            });
            return allTestList;
        }
        else
            return allTestList;
    }
    else
        return allTestList;
};
exports.buildTestsList = buildTestsList;
const buildScriptsList = async () => {
    let allScriptList = await (0, exports.buildAllScriptsList)();
    let excludedFiles = await (0, buildExcludedFile_1.buildExcludedFile)();
    const buildFilePath = [];
    if (excludedFiles && excludedFiles.length > 0) {
        excludedFiles = excludedFiles.filter((test) => test.directory === 'scripts');
        if (excludedFiles && excludedFiles.length > 0) {
            excludedFiles.map((file) => {
                buildFilePath.push(file.filePath);
            });
            allScriptList = allScriptList.filter((script) => {
                return !buildFilePath.includes(script.filePath);
            });
            return allScriptList;
        }
        else
            return allScriptList;
    }
    else
        return allScriptList;
};
exports.buildScriptsList = buildScriptsList;
const buildContractsList = async () => {
    let allContractsList = await (0, exports.buildAllContractsList)();
    let excludedFiles = await (0, buildExcludedFile_1.buildExcludedFile)();
    const buildFilePath = [];
    if (excludedFiles !== undefined && excludedFiles.length > 0) {
        excludedFiles = excludedFiles.filter((test) => test.directory === 'contracts');
        if (excludedFiles !== undefined && excludedFiles.length > 0) {
            excludedFiles.map((file) => {
                buildFilePath.push(file.filePath);
            });
            allContractsList = allContractsList.filter((script) => {
                return !buildFilePath.includes(script.filePath);
            });
            return allContractsList;
        }
        else
            return allContractsList;
    }
    else
        return allContractsList;
};
exports.buildContractsList = buildContractsList;
//# sourceMappingURL=buildFilesList.js.map