"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwesomeAddressBook = void 0;
const fs_1 = __importDefault(require("fs"));
const config_1 = require("./config");
class AwesomeAddressBook {
    constructor(hre) {
        this._env = hre;
    }
    formatSaveContract(contractName, contractAddress, deployedNetwork, deployedBy, chainId, blockHash, blockNumber, tag, extra) {
        const contractToAdd = {
            name: contractName,
            address: contractAddress,
            network: deployedNetwork,
            deployer: deployedBy,
            deploymentDate: new Date().toString(),
            chainId,
            blockHash: blockHash || '',
            blockNumber: blockNumber || 0,
            tag: tag ? tag : '',
            extra: extra || {}
        };
        return contractToAdd;
    }
    saveContract(contractName, contractAddress, deployedNetwork, deployedBy, chainId = 0, blockHash, blockNumber, tag, extra, forceAdd = false) {
        if (!forceAdd ||
            this._env.network.name === 'hardhat' ||
            this._env.network.name === 'localhost' ||
            this._env.network.name === 'anvil')
            return;
        const contractToAdd = this.formatSaveContract(contractName, contractAddress, deployedNetwork, deployedBy, chainId, blockHash, blockNumber, tag, extra);
        let contractsAddressDeployed = [];
        let contractsAddressDeployedHistory = [];
        const addressBookConfig = (0, config_1.getAddressBookConfig)(this._env.userConfig);
        // Add folder if not exist
        if (!fs_1.default.existsSync(addressBookConfig.savePath))
            fs_1.default.mkdirSync(addressBookConfig.savePath);
        // Add or edit contract address if deploy on same network
        if (fs_1.default.existsSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed)) {
            const rawdata = fs_1.default.readFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed);
            contractsAddressDeployed = JSON.parse(rawdata);
            if (contractsAddressDeployed !== undefined && contractsAddressDeployed.length > 0) {
                let recordModify = false;
                contractsAddressDeployed = contractsAddressDeployed.map((c) => {
                    if (c.name === contractName && c.network === deployedNetwork) {
                        c.address = contractAddress;
                        c.deployer = deployedBy;
                        c.deploymentDate = new Date().toString();
                        c.chainId = chainId;
                        c.blockHash = blockHash || '';
                        c.blockNumber = blockNumber || 0;
                        c.tag = tag || '';
                        c.extra = extra || {};
                        recordModify = true;
                    }
                    return c;
                });
                if (!recordModify) {
                    contractsAddressDeployed.push(contractToAdd);
                }
            }
            fs_1.default.unlinkSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed);
        }
        else {
            contractsAddressDeployed.push(contractToAdd);
        }
        try {
            fs_1.default.writeFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed, JSON.stringify(contractsAddressDeployed, null, 2));
        }
        catch (err) {
            console.log('Error writing address to file: ', err);
        }
        // Log all contracts deployed
        if (fs_1.default.existsSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory)) {
            const rawdata = fs_1.default.readFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory);
            contractsAddressDeployedHistory = JSON.parse(rawdata);
            contractsAddressDeployedHistory.push(contractToAdd);
            fs_1.default.unlinkSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory);
        }
        else {
            contractsAddressDeployedHistory.push(contractToAdd);
        }
        try {
            fs_1.default.writeFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory, JSON.stringify(contractsAddressDeployedHistory, null, 2));
        }
        catch (err) {
            console.log('Error writing address to file: ', err);
        }
    }
    retrieveContract(contractName, deployedNetwork) {
        let returnContractAddress = '';
        const addressBookConfig = (0, config_1.getAddressBookConfig)(this._env.userConfig);
        if (fs_1.default.existsSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed)) {
            const rawdata = fs_1.default.readFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed);
            const contractsAddressDeployed = JSON.parse(rawdata);
            if (contractsAddressDeployed !== undefined && contractsAddressDeployed.length > 0) {
                if (contractsAddressDeployed.find((c) => c.name === contractName && c.network === deployedNetwork))
                    returnContractAddress = contractsAddressDeployed.filter((c) => c.name === contractName && c.network === deployedNetwork)[0].address;
            }
        }
        return returnContractAddress;
    }
    retrieveContractObject(contractName, deployedNetwork) {
        const addressBookConfig = (0, config_1.getAddressBookConfig)(this._env.userConfig);
        if (fs_1.default.existsSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed)) {
            const rawdata = fs_1.default.readFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed);
            const contractsAddressDeployed = JSON.parse(rawdata);
            if (contractsAddressDeployed !== undefined && contractsAddressDeployed.length > 0) {
                if (contractsAddressDeployed.find((c) => c.name === contractName && c.network === deployedNetwork))
                    return contractsAddressDeployed.filter((c) => c.name === contractName && c.network === deployedNetwork)[0];
                else
                    return null;
            }
            else
                return null;
        }
        else
            return null;
    }
    retrieveOZAdminProxyContract(chainId) {
        let returnContractAddress = '';
        const addressBookConfig = (0, config_1.getAddressBookConfig)(this._env.userConfig);
        let ozFileName = '';
        switch (chainId) {
            case 1:
                ozFileName = 'mainnet';
            case 3:
                ozFileName = 'ropsten';
            case 4:
                ozFileName = 'rinkeby';
            case 5:
                ozFileName = 'goerli';
            case 42:
                ozFileName = 'kovan';
            default:
                ozFileName = `unknown-${chainId}`;
        }
        if (fs_1.default.existsSync(`${addressBookConfig.openzeppelinPath}/${ozFileName}.json`)) {
            const ozFileRawdata = fs_1.default.readFileSync(`${addressBookConfig.openzeppelinPath}/${ozFileName}.json`);
            returnContractAddress = JSON.parse(ozFileRawdata).admin.address;
        }
        return returnContractAddress;
    }
    retrieveContractHistory(deployedNetwork) {
        const addressBookConfig = (0, config_1.getAddressBookConfig)(this._env.userConfig);
        const returnContractAddress = [];
        if (fs_1.default.existsSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory)) {
            const rawdata = fs_1.default.readFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory);
            const contractsAddressDeployedHistory = JSON.parse(rawdata);
            if (contractsAddressDeployedHistory !== undefined && contractsAddressDeployedHistory.length > 0) {
                contractsAddressDeployedHistory
                    .filter((c) => c.network === deployedNetwork)
                    .forEach((c) => {
                    returnContractAddress.push(c);
                });
            }
        }
        return returnContractAddress;
    }
    cleanContractDeployed(field, value, applyToPrimary = true, applyToHistory = true) {
        const addressBookConfig = (0, config_1.getAddressBookConfig)(this._env.userConfig);
        if (applyToPrimary)
            if (fs_1.default.existsSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed)) {
                const rawdata = fs_1.default.readFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed);
                const contractsAddressDeployed = JSON.parse(rawdata);
                if (contractsAddressDeployed !== undefined && contractsAddressDeployed.length > 0) {
                    if (contractsAddressDeployed.find((c) => c[field] === value)) {
                        const contractsAddressDeployedFiltered = contractsAddressDeployed.filter((c) => c[field] !== value);
                        fs_1.default.unlinkSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed);
                        const contractsAddressDeployedFilteredString = contractsAddressDeployedFiltered.length > 0
                            ? JSON.stringify(contractsAddressDeployedFiltered, null, 2)
                            : '';
                        try {
                            fs_1.default.writeFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployed, contractsAddressDeployedFilteredString);
                        }
                        catch (err) {
                            console.log('Error writing address to file: ', err);
                        }
                    }
                }
            }
        if (applyToHistory)
            if (fs_1.default.existsSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory)) {
                const rawdata = fs_1.default.readFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory);
                const contractsAddressHistoryDeployed = JSON.parse(rawdata);
                if (contractsAddressHistoryDeployed !== undefined && contractsAddressHistoryDeployed.length > 0) {
                    if (contractsAddressHistoryDeployed.find((c) => c[field] === value)) {
                        const contractsAddressDeployedHistoryFiltered = contractsAddressHistoryDeployed.filter((c) => c[field] !== value);
                        fs_1.default.unlinkSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory);
                        const contractsAddressDeployedHistoryFilteredString = contractsAddressDeployedHistoryFiltered.length > 0
                            ? JSON.stringify(contractsAddressDeployedHistoryFiltered, null, 2)
                            : '';
                        try {
                            fs_1.default.writeFileSync(addressBookConfig.savePath + addressBookConfig.fileContractsAddressDeployedHistory, contractsAddressDeployedHistoryFilteredString);
                        }
                        catch (err) {
                            console.log('Error writing address to file: ', err);
                        }
                    }
                }
            }
    }
}
exports.AwesomeAddressBook = AwesomeAddressBook;
//# sourceMappingURL=AwesomeAddressBook.js.map