"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeExcludedFiles = exports.addExcludedFiles = exports.buildExcludedFile = void 0;
const fs_1 = __importDefault(require("fs"));
const buildFilesList_1 = require("./buildFilesList");
const config_1 = require("./config");
const buildExcludedFile = async () => {
    let fileSetting = [];
    const addressBookConfig = (0, config_1.getAddressBookConfig)();
    if (fs_1.default.existsSync(addressBookConfig.fileHardhatAwesomeCLI)) {
        const rawdata = fs_1.default.readFileSync(addressBookConfig.fileHardhatAwesomeCLI);
        fileSetting = JSON.parse(rawdata);
        if (fileSetting && fileSetting.excludedFiles && fileSetting.excludedFiles.length > 0)
            return fileSetting.excludedFiles;
    }
    return [];
};
exports.buildExcludedFile = buildExcludedFile;
const addExcludedFiles = async (directory, name, filePath) => {
    let fileSetting = [];
    const addressBookConfig = (0, config_1.getAddressBookConfig)();
    const fileToAdd = {
        directory,
        name,
        filePath
    };
    if (fs_1.default.existsSync(addressBookConfig.fileHardhatAwesomeCLI)) {
        const rawdata = fs_1.default.readFileSync(addressBookConfig.fileHardhatAwesomeCLI);
        fileSetting = JSON.parse(rawdata);
        if (fileSetting && !fileSetting.excludedFiles) {
            fileSetting = Object.assign(Object.assign({}, fileSetting), { excludedFiles: [] });
        }
    }
    else {
        fileSetting = {
            excludedFiles: []
        };
    }
    if (fileSetting && fileSetting.excludedFiles) {
        if (fileSetting.excludedFiles.length > 0) {
            if (!fileSetting.excludedFiles.find((file) => file.directory === directory && file.filePath === filePath))
                fileSetting.excludedFiles.push(fileToAdd);
        }
        else
            fileSetting.excludedFiles.push(fileToAdd);
    }
    else {
        fileSetting.push({
            excludedFiles: [fileToAdd]
        });
    }
    try {
        fs_1.default.writeFileSync(addressBookConfig.fileHardhatAwesomeCLI, JSON.stringify(fileSetting, null, 2));
    }
    catch (_a) {
        console.log('\x1b[31m%s\x1b[0m', 'Error adding file: ' + directory + '/' + filePath + ' to your excluded files settings!');
    }
};
exports.addExcludedFiles = addExcludedFiles;
const removeExcludedFiles = async (directory, filePath) => {
    let allFiles = [];
    const addressBookConfig = (0, config_1.getAddressBookConfig)();
    if (directory === 'test') {
        allFiles = (await (0, buildFilesList_1.buildAllTestsList)())
            .filter((test) => test.type === 'file')
            .map((file) => {
            return file.filePath;
        });
    }
    else if (directory === 'script') {
        allFiles = (await (0, buildFilesList_1.buildAllScriptsList)())
            .filter((script) => script.type === 'file')
            .map((file) => {
            return file.filePath;
        });
    }
    const fileToRemove = allFiles.find((file) => file.directory === directory && file.filePath === filePath);
    let fileSetting = [];
    if (fs_1.default.existsSync(addressBookConfig.fileHardhatAwesomeCLI)) {
        const rawdata = fs_1.default.readFileSync(addressBookConfig.fileHardhatAwesomeCLI);
        fileSetting = JSON.parse(rawdata);
        if (fileSetting && fileSetting.excludedFiles) {
            if (fileSetting.excludedFiles.length > 0) {
                fileSetting.excludedFiles
                    .filter((file) => file.directory === directory && file.filePath === filePath)
                    .forEach(() => {
                    fileSetting.excludedFiles.pop(fileToRemove);
                    fs_1.default.writeFileSync(addressBookConfig.fileHardhatAwesomeCLI, JSON.stringify(fileSetting, null, 2));
                });
            }
        }
    }
};
exports.removeExcludedFiles = removeExcludedFiles;
//# sourceMappingURL=buildExcludedFile.js.map